// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlog.API.Data;

#nullable disable

namespace PersonalBlog.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922073047_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsVisible");

                    b.HasIndex("PublishedDate");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPostTag", b =>
                {
                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostTags");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3035a20-1b85-4a05-a6ec-dfaddda0c9f8"),
                            Name = "Technology",
                            UrlHandle = "technology"
                        },
                        new
                        {
                            Id = new Guid("fba12d6e-41e5-4af9-b372-9c820421450b"),
                            Name = "Programming",
                            UrlHandle = "programming"
                        },
                        new
                        {
                            Id = new Guid("07d24d25-3cee-4ebe-bbef-15447ae1273d"),
                            Name = "Web Development",
                            UrlHandle = "web-development"
                        });
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d488b212-dc12-4e1e-9527-de056a3967af"),
                            Name = "C#",
                            UrlHandle = "csharp"
                        },
                        new
                        {
                            Id = new Guid("2d45e1c1-b808-4d38-bd68-a576846f873b"),
                            Name = ".NET",
                            UrlHandle = "dotnet"
                        },
                        new
                        {
                            Id = new Guid("95bb03b1-e56b-4705-a11c-91e4ea333cab"),
                            Name = "Entity Framework",
                            UrlHandle = "entity-framework"
                        },
                        new
                        {
                            Id = new Guid("966a89f1-abbc-4355-b101-d470513047fe"),
                            Name = "API",
                            UrlHandle = "api"
                        },
                        new
                        {
                            Id = new Guid("3fd4e6e1-14cf-4255-9c78-5dbb8a71cf08"),
                            Name = "React",
                            UrlHandle = "react"
                        });
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.HasOne("PersonalBlog.API.Models.Domain.Category", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPostTag", b =>
                {
                    b.HasOne("PersonalBlog.API.Models.Domain.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.API.Models.Domain.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.Navigation("BlogPostTags");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Category", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Tag", b =>
                {
                    b.Navigation("BlogPostTags");
                });
#pragma warning restore 612, 618
        }
    }
}

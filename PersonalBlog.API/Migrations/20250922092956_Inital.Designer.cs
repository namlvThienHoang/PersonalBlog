// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonalBlog.API.Data;

#nullable disable

namespace PersonalBlog.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922092956_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsVisible");

                    b.HasIndex("PublishedDate");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPostTag", b =>
                {
                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("BlogPostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostTags");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("752f16c7-4584-4e49-8896-d505057f04ba"),
                            Name = "Technology",
                            UrlHandle = "technology"
                        },
                        new
                        {
                            Id = new Guid("0e3fd9bd-0645-4809-8931-104b95245c04"),
                            Name = "Programming",
                            UrlHandle = "programming"
                        },
                        new
                        {
                            Id = new Guid("a2d213cf-62c0-4127-b8da-77a7e4151a9c"),
                            Name = "Web Development",
                            UrlHandle = "web-development"
                        });
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UrlHandle")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b4d8833-cc77-4606-a0b8-f807873d65e3"),
                            Name = "C#",
                            UrlHandle = "csharp"
                        },
                        new
                        {
                            Id = new Guid("c0a7938e-81cc-4d69-8f2f-b1ed8df3ac5a"),
                            Name = ".NET",
                            UrlHandle = "dotnet"
                        },
                        new
                        {
                            Id = new Guid("9f1bf908-8c19-4072-9b22-bf463e39231d"),
                            Name = "Entity Framework",
                            UrlHandle = "entity-framework"
                        },
                        new
                        {
                            Id = new Guid("1f8b3dbd-b57c-4a02-b9e8-37a4daebce4c"),
                            Name = "API",
                            UrlHandle = "api"
                        },
                        new
                        {
                            Id = new Guid("bf1d9c57-8ea7-496a-9275-6dd53322296d"),
                            Name = "React",
                            UrlHandle = "react"
                        });
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.HasOne("PersonalBlog.API.Models.Domain.Category", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPostTag", b =>
                {
                    b.HasOne("PersonalBlog.API.Models.Domain.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.API.Models.Domain.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.BlogPost", b =>
                {
                    b.Navigation("BlogPostTags");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Category", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("PersonalBlog.API.Models.Domain.Tag", b =>
                {
                    b.Navigation("BlogPostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
